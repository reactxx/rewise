Build Process
=============

This document covers the steps required to build dotNetRDF and build a release (if so desired)

Prerequisites
-------------

To build dotNetRDF you will need one of the following:

 - Visual Studio 2010 or higher
 OR
 - NAnt (http://nant.sourceforge.net) and .Net 4.0 SDK

You will also need the following installed on your machine:

 - NuGet (http://nuget.codeplex.com)
 - Portable Class Library tools with .Net 4.5 targets

Standard (Visual Studio) Build
------------------------------

The standard build is very simple, load dotNetRDF.sln into Visual Studio and simply do a Rebuild All

Alternatively to build via nant run the following command:

nant build

Advanced Build
--------------

To run the advanced builds you can use any of the relevant nant targets depending on what you want to build.

To build everything simply run the following:

nant build

This will build all the libraries and toolkit utilities and copy them to the bin/nightlies directory.

If you prefer you can compile in VS and then run the following to prepare the directory structures that subsequent
release steps expect:

nant no-compile build

Release Process
===============

To make a release you must perform the following steps:

Prerequisites
-------------

As build process but nuget may also be needed if you intended to make NuGet packages

1 - Test
--------

Run all relevant unit tests and other tests suites (e.g. SPARQL DAWG) to ensure that no regressions or breaking
changes have crept in.  In the case of breaking changes you may need to update unit tests to reflect new
code/behaviour.

You can check the CI server at ci.dotnetrdf.org to see latest build statest though the build server is a little
flaky and may not be up.

2 - Build
---------

Make all the builds using the advanced build process outlined above, test the compiled binaries as desired

Then use the following nant command once you are happy with the generated nightlies:

nant no-compile build-release

This command takes the existing nightly builds and copies them to the bin/stable directory

If you know the code is good you can just run the following:

nant build-release

This will rebuild all the nightlies and then copy them to the bin/stable directory.  However it can't build the toolkit
installer so you may want to compile with VS first and then run with the no-compile target instead.

3 - Create ZIP Distributions
----------------------------

Before you create distributions check the properties set at the start of the dotnetrdf.build file to ensure that
the versions and release types are correct.

You can then run the following nant command:

nant no-build dist-libs-stable dist-libs-nuget dist-utils-stable dist-utils-installer

This will generate you four ZIP files comprising the libraries, source code, toolkit and toolkit installer

4 - Upload ZIP Distributions
----------------------------

Upload ZIPs to desired distribution locations, for official releases the following locations should be used:

- dotnetrdf.org
- sourceforge.net/projects/dotnetrdf
- dotnetrdf.codeplex.com
- bitbucket.org/dotnetrdf/dotnetrdf/

5 - Update NuGet Packages
-------------------------

For official releases the NuGet packages should be generated and uploaded.

First check that the property for nuspec version is up to date in the dotnetrdf.build file, this is inserted into
the NuSpec files so there should be no need to modify the NuSpec files manually.

You can then upload the NuGet packages using the following nant command:

nant no-build upload-nuget

