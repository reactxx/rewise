// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rewise/hack_json/hack_json_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rw.HackJson {

  /// <summary>Holder for reflection information generated from rewise/hack_json/hack_json_service.proto</summary>
  public static partial class HackJsonServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for rewise/hack_json/hack_json_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HackJsonServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihyZXdpc2UvaGFja19qc29uL2hhY2tfanNvbl9zZXJ2aWNlLnByb3RvEgxy",
            "dy5oYWNrX2pzb24aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxob",
            "Z29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGhlyZXdpc2UvdXRpbHMvY29t",
            "bW9uLnByb3RvIlcKC0hhY2tKc29uUGFyEh4KFnF1YWxpZmllZF9tZXNzYWdl",
            "X25hbWUYASABKAkSEgoKaXNfdG9fanNvbhgCIAEoCBIJCgFzGAMgASgJEgkK",
            "AWIYBCABKAwibAoPSGFja0pzb25GaWxlUGFyEh4KFnF1YWxpZmllZF9tZXNz",
            "YWdlX25hbWUYASABKAkSEgoKaXNfdG9fanNvbhgCIAEoCBIlCgVmaWxlcxgD",
            "IAEoCzIWLnJ3LmNvbW1vbi5Gcm9tVG9GaWxlczKcAQoNQ1NoYXJwU2Vydmlj",
            "ZRJCCghIYWNrSnNvbhIZLnJ3LmhhY2tfanNvbi5IYWNrSnNvblBhchoZLnJ3",
            "LmhhY2tfanNvbi5IYWNrSnNvblBhciIAEkcKDEhhY2tKc29uRmlsZRIdLnJ3",
            "LmhhY2tfanNvbi5IYWNrSnNvbkZpbGVQYXIaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Rw.Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.HackJson.HackJsonPar), global::Rw.HackJson.HackJsonPar.Parser, new[]{ "QualifiedMessageName", "IsToJson", "S", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.HackJson.HackJsonFilePar), global::Rw.HackJson.HackJsonFilePar.Parser, new[]{ "QualifiedMessageName", "IsToJson", "Files" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HackJsonPar : pb::IMessage<HackJsonPar> {
    private static readonly pb::MessageParser<HackJsonPar> _parser = new pb::MessageParser<HackJsonPar>(() => new HackJsonPar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HackJsonPar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.HackJson.HackJsonServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackJsonPar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackJsonPar(HackJsonPar other) : this() {
      qualifiedMessageName_ = other.qualifiedMessageName_;
      isToJson_ = other.isToJson_;
      s_ = other.s_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackJsonPar Clone() {
      return new HackJsonPar(this);
    }

    /// <summary>Field number for the "qualified_message_name" field.</summary>
    public const int QualifiedMessageNameFieldNumber = 1;
    private string qualifiedMessageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QualifiedMessageName {
      get { return qualifiedMessageName_; }
      set {
        qualifiedMessageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_to_json" field.</summary>
    public const int IsToJsonFieldNumber = 2;
    private bool isToJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToJson {
      get { return isToJson_; }
      set {
        isToJson_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 3;
    private string s_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string S {
      get { return s_; }
      set {
        s_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 4;
    private pb::ByteString b_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString B {
      get { return b_; }
      set {
        b_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HackJsonPar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HackJsonPar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QualifiedMessageName != other.QualifiedMessageName) return false;
      if (IsToJson != other.IsToJson) return false;
      if (S != other.S) return false;
      if (B != other.B) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QualifiedMessageName.Length != 0) hash ^= QualifiedMessageName.GetHashCode();
      if (IsToJson != false) hash ^= IsToJson.GetHashCode();
      if (S.Length != 0) hash ^= S.GetHashCode();
      if (B.Length != 0) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QualifiedMessageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(QualifiedMessageName);
      }
      if (IsToJson != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsToJson);
      }
      if (S.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(S);
      }
      if (B.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QualifiedMessageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QualifiedMessageName);
      }
      if (IsToJson != false) {
        size += 1 + 1;
      }
      if (S.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(S);
      }
      if (B.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(B);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HackJsonPar other) {
      if (other == null) {
        return;
      }
      if (other.QualifiedMessageName.Length != 0) {
        QualifiedMessageName = other.QualifiedMessageName;
      }
      if (other.IsToJson != false) {
        IsToJson = other.IsToJson;
      }
      if (other.S.Length != 0) {
        S = other.S;
      }
      if (other.B.Length != 0) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            QualifiedMessageName = input.ReadString();
            break;
          }
          case 16: {
            IsToJson = input.ReadBool();
            break;
          }
          case 26: {
            S = input.ReadString();
            break;
          }
          case 34: {
            B = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HackJsonFilePar : pb::IMessage<HackJsonFilePar> {
    private static readonly pb::MessageParser<HackJsonFilePar> _parser = new pb::MessageParser<HackJsonFilePar>(() => new HackJsonFilePar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HackJsonFilePar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.HackJson.HackJsonServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackJsonFilePar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackJsonFilePar(HackJsonFilePar other) : this() {
      qualifiedMessageName_ = other.qualifiedMessageName_;
      isToJson_ = other.isToJson_;
      files_ = other.files_ != null ? other.files_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackJsonFilePar Clone() {
      return new HackJsonFilePar(this);
    }

    /// <summary>Field number for the "qualified_message_name" field.</summary>
    public const int QualifiedMessageNameFieldNumber = 1;
    private string qualifiedMessageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QualifiedMessageName {
      get { return qualifiedMessageName_; }
      set {
        qualifiedMessageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_to_json" field.</summary>
    public const int IsToJsonFieldNumber = 2;
    private bool isToJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToJson {
      get { return isToJson_; }
      set {
        isToJson_ = value;
      }
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 3;
    private global::Rw.Common.FromToFiles files_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rw.Common.FromToFiles Files {
      get { return files_; }
      set {
        files_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HackJsonFilePar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HackJsonFilePar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QualifiedMessageName != other.QualifiedMessageName) return false;
      if (IsToJson != other.IsToJson) return false;
      if (!object.Equals(Files, other.Files)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QualifiedMessageName.Length != 0) hash ^= QualifiedMessageName.GetHashCode();
      if (IsToJson != false) hash ^= IsToJson.GetHashCode();
      if (files_ != null) hash ^= Files.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QualifiedMessageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(QualifiedMessageName);
      }
      if (IsToJson != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsToJson);
      }
      if (files_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Files);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QualifiedMessageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QualifiedMessageName);
      }
      if (IsToJson != false) {
        size += 1 + 1;
      }
      if (files_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Files);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HackJsonFilePar other) {
      if (other == null) {
        return;
      }
      if (other.QualifiedMessageName.Length != 0) {
        QualifiedMessageName = other.QualifiedMessageName;
      }
      if (other.IsToJson != false) {
        IsToJson = other.IsToJson;
      }
      if (other.files_ != null) {
        if (files_ == null) {
          files_ = new global::Rw.Common.FromToFiles();
        }
        Files.MergeFrom(other.Files);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            QualifiedMessageName = input.ReadString();
            break;
          }
          case 16: {
            IsToJson = input.ReadBool();
            break;
          }
          case 26: {
            if (files_ == null) {
              files_ = new global::Rw.Common.FromToFiles();
            }
            input.ReadMessage(files_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
