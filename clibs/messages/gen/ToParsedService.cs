// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rewise/to_parsed/to_parsed_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rw.ToParsed {

  /// <summary>Holder for reflection information generated from rewise/to_parsed/to_parsed_service.proto</summary>
  public static partial class ToParsedServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for rewise/to_parsed/to_parsed_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ToParsedServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihyZXdpc2UvdG9fcGFyc2VkL3RvX3BhcnNlZF9zZXJ2aWNlLnByb3RvEgxy",
            "dy50b19wYXJzZWQiTwoIUmF3Qm9va3MSDAoEbmFtZRgBIAEoCRIkCgVib29r",
            "cxgCIAMoCzIVLnJ3LnRvX3BhcnNlZC5SYXdCb29rEg8KB2xlc3NvbnMYAyAD",
            "KAUiJgoHUmF3Qm9vaxIMCgRsYW5nGAEgASgJEg0KBWZhY3RzGAIgAygJIkQK",
            "C1BhcnNlZEJvb2tzEgwKBG5hbWUYASABKAkSJwoFYm9va3MYAiADKAsyGC5y",
            "dy50b19wYXJzZWQuUGFyc2VkQm9vayJDCgpQYXJzZWRCb29rEgwKBGxhbmcY",
            "ASABKAkSJwoFZmFjdHMYAiADKAsyGC5ydy50b19wYXJzZWQuUGFyc2VkRmFj",
            "dCJZCgpQYXJzZWRGYWN0EgsKA2lkeBgBIAEoBRIRCglsZXNzb25faWQYAiAB",
            "KAUSKwoGY2hpbGRzGAMgAygLMhsucncudG9fcGFyc2VkLlBhcnNlZFN1YkZh",
            "Y3QiVQoNUGFyc2VkU3ViRmFjdBIMCgR0ZXh0GAEgASgJEhIKCmJyZWFrX3Rl",
            "eHQYAiABKAkSEgoKd29yZF9jbGFzcxgDIAEoCRIOCgZicmVha3MYBCABKAwi",
            "RgoMQnJhY2tldEJvb2tzEgwKBG5hbWUYASABKAkSKAoFYm9va3MYAiADKAsy",
            "GS5ydy50b19wYXJzZWQuQnJhY2tldEJvb2sisgIKC0JyYWNrZXRCb29rEgwK",
            "BGxhbmcYASABKAkSJwoIYnJhY2tldHMYAiADKAsyFS5ydy50b19wYXJzZWQu",
            "QnJhY2tldBITCgthbHBoYWJldEFsbBgDIAEoCRJHCg9hbHBoYWJldFNjcmlw",
            "dHMYBCADKAsyLi5ydy50b19wYXJzZWQuQnJhY2tldEJvb2suQWxwaGFiZXRT",
            "Y3JpcHRzRW50cnkSDwoHb2tXb3JkcxgFIAMoCRIZChF3cm9uZ1VuaWNvZGVX",
            "b3JkcxgGIAMoCRIWCg53cm9uZ0NsZHJXb3JkcxgHIAMoCRISCgpsYXRpbldv",
            "cmRzGAggAygJGjYKFEFscGhhYmV0U2NyaXB0c0VudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEiNwoHQnJhY2tldBIMCgR0eXBlGAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJEg8KB2ZhY3RJZHgYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.RawBooks), global::Rw.ToParsed.RawBooks.Parser, new[]{ "Name", "Books", "Lessons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.RawBook), global::Rw.ToParsed.RawBook.Parser, new[]{ "Lang", "Facts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.ParsedBooks), global::Rw.ToParsed.ParsedBooks.Parser, new[]{ "Name", "Books" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.ParsedBook), global::Rw.ToParsed.ParsedBook.Parser, new[]{ "Lang", "Facts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.ParsedFact), global::Rw.ToParsed.ParsedFact.Parser, new[]{ "Idx", "LessonId", "Childs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.ParsedSubFact), global::Rw.ToParsed.ParsedSubFact.Parser, new[]{ "Text", "BreakText", "WordClass", "Breaks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.BracketBooks), global::Rw.ToParsed.BracketBooks.Parser, new[]{ "Name", "Books" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.BracketBook), global::Rw.ToParsed.BracketBook.Parser, new[]{ "Lang", "Brackets", "AlphabetAll", "AlphabetScripts", "OkWords", "WrongUnicodeWords", "WrongCldrWords", "LatinWords" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rw.ToParsed.Bracket), global::Rw.ToParsed.Bracket.Parser, new[]{ "Type", "Value", "FactIdx" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RawBooks : pb::IMessage<RawBooks> {
    private static readonly pb::MessageParser<RawBooks> _parser = new pb::MessageParser<RawBooks>(() => new RawBooks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawBooks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawBooks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawBooks(RawBooks other) : this() {
      name_ = other.name_;
      books_ = other.books_.Clone();
      lessons_ = other.lessons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawBooks Clone() {
      return new RawBooks(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "books" field.</summary>
    public const int BooksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rw.ToParsed.RawBook> _repeated_books_codec
        = pb::FieldCodec.ForMessage(18, global::Rw.ToParsed.RawBook.Parser);
    private readonly pbc::RepeatedField<global::Rw.ToParsed.RawBook> books_ = new pbc::RepeatedField<global::Rw.ToParsed.RawBook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rw.ToParsed.RawBook> Books {
      get { return books_; }
    }

    /// <summary>Field number for the "lessons" field.</summary>
    public const int LessonsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_lessons_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> lessons_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Lessons {
      get { return lessons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawBooks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawBooks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!books_.Equals(other.books_)) return false;
      if(!lessons_.Equals(other.lessons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= books_.GetHashCode();
      hash ^= lessons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      books_.WriteTo(output, _repeated_books_codec);
      lessons_.WriteTo(output, _repeated_lessons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += books_.CalculateSize(_repeated_books_codec);
      size += lessons_.CalculateSize(_repeated_lessons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawBooks other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      books_.Add(other.books_);
      lessons_.Add(other.lessons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            books_.AddEntriesFrom(input, _repeated_books_codec);
            break;
          }
          case 26:
          case 24: {
            lessons_.AddEntriesFrom(input, _repeated_lessons_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RawBook : pb::IMessage<RawBook> {
    private static readonly pb::MessageParser<RawBook> _parser = new pb::MessageParser<RawBook>(() => new RawBook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawBook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawBook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawBook(RawBook other) : this() {
      lang_ = other.lang_;
      facts_ = other.facts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawBook Clone() {
      return new RawBook(this);
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 1;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "facts" field.</summary>
    public const int FactsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_facts_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> facts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Facts {
      get { return facts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawBook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawBook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lang != other.Lang) return false;
      if(!facts_.Equals(other.facts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      hash ^= facts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lang.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lang);
      }
      facts_.WriteTo(output, _repeated_facts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      size += facts_.CalculateSize(_repeated_facts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawBook other) {
      if (other == null) {
        return;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      facts_.Add(other.facts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lang = input.ReadString();
            break;
          }
          case 18: {
            facts_.AddEntriesFrom(input, _repeated_facts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParsedBooks : pb::IMessage<ParsedBooks> {
    private static readonly pb::MessageParser<ParsedBooks> _parser = new pb::MessageParser<ParsedBooks>(() => new ParsedBooks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParsedBooks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedBooks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedBooks(ParsedBooks other) : this() {
      name_ = other.name_;
      books_ = other.books_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedBooks Clone() {
      return new ParsedBooks(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "books" field.</summary>
    public const int BooksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rw.ToParsed.ParsedBook> _repeated_books_codec
        = pb::FieldCodec.ForMessage(18, global::Rw.ToParsed.ParsedBook.Parser);
    private readonly pbc::RepeatedField<global::Rw.ToParsed.ParsedBook> books_ = new pbc::RepeatedField<global::Rw.ToParsed.ParsedBook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rw.ToParsed.ParsedBook> Books {
      get { return books_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParsedBooks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParsedBooks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!books_.Equals(other.books_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= books_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      books_.WriteTo(output, _repeated_books_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += books_.CalculateSize(_repeated_books_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParsedBooks other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      books_.Add(other.books_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            books_.AddEntriesFrom(input, _repeated_books_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParsedBook : pb::IMessage<ParsedBook> {
    private static readonly pb::MessageParser<ParsedBook> _parser = new pb::MessageParser<ParsedBook>(() => new ParsedBook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParsedBook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedBook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedBook(ParsedBook other) : this() {
      lang_ = other.lang_;
      facts_ = other.facts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedBook Clone() {
      return new ParsedBook(this);
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 1;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "facts" field.</summary>
    public const int FactsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rw.ToParsed.ParsedFact> _repeated_facts_codec
        = pb::FieldCodec.ForMessage(18, global::Rw.ToParsed.ParsedFact.Parser);
    private readonly pbc::RepeatedField<global::Rw.ToParsed.ParsedFact> facts_ = new pbc::RepeatedField<global::Rw.ToParsed.ParsedFact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rw.ToParsed.ParsedFact> Facts {
      get { return facts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParsedBook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParsedBook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lang != other.Lang) return false;
      if(!facts_.Equals(other.facts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      hash ^= facts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lang.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lang);
      }
      facts_.WriteTo(output, _repeated_facts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      size += facts_.CalculateSize(_repeated_facts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParsedBook other) {
      if (other == null) {
        return;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      facts_.Add(other.facts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lang = input.ReadString();
            break;
          }
          case 18: {
            facts_.AddEntriesFrom(input, _repeated_facts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParsedFact : pb::IMessage<ParsedFact> {
    private static readonly pb::MessageParser<ParsedFact> _parser = new pb::MessageParser<ParsedFact>(() => new ParsedFact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParsedFact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedFact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedFact(ParsedFact other) : this() {
      idx_ = other.idx_;
      lessonId_ = other.lessonId_;
      childs_ = other.childs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedFact Clone() {
      return new ParsedFact(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private int idx_;
    /// <summary>
    /// index of fact in csv source. Could be more facts with the same source (multiple fact for right side)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "lesson_id" field.</summary>
    public const int LessonIdFieldNumber = 2;
    private int lessonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LessonId {
      get { return lessonId_; }
      set {
        lessonId_ = value;
      }
    }

    /// <summary>Field number for the "childs" field.</summary>
    public const int ChildsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Rw.ToParsed.ParsedSubFact> _repeated_childs_codec
        = pb::FieldCodec.ForMessage(26, global::Rw.ToParsed.ParsedSubFact.Parser);
    private readonly pbc::RepeatedField<global::Rw.ToParsed.ParsedSubFact> childs_ = new pbc::RepeatedField<global::Rw.ToParsed.ParsedSubFact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rw.ToParsed.ParsedSubFact> Childs {
      get { return childs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParsedFact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParsedFact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      if (LessonId != other.LessonId) return false;
      if(!childs_.Equals(other.childs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (LessonId != 0) hash ^= LessonId.GetHashCode();
      hash ^= childs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (LessonId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LessonId);
      }
      childs_.WriteTo(output, _repeated_childs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (LessonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LessonId);
      }
      size += childs_.CalculateSize(_repeated_childs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParsedFact other) {
      if (other == null) {
        return;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.LessonId != 0) {
        LessonId = other.LessonId;
      }
      childs_.Add(other.childs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
          case 16: {
            LessonId = input.ReadInt32();
            break;
          }
          case 26: {
            childs_.AddEntriesFrom(input, _repeated_childs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParsedSubFact : pb::IMessage<ParsedSubFact> {
    private static readonly pb::MessageParser<ParsedSubFact> _parser = new pb::MessageParser<ParsedSubFact>(() => new ParsedSubFact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParsedSubFact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedSubFact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedSubFact(ParsedSubFact other) : this() {
      text_ = other.text_;
      breakText_ = other.breakText_;
      wordClass_ = other.wordClass_;
      breaks_ = other.breaks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParsedSubFact Clone() {
      return new ParsedSubFact(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "break_text" field.</summary>
    public const int BreakTextFieldNumber = 2;
    private string breakText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BreakText {
      get { return breakText_; }
      set {
        breakText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "word_class" field.</summary>
    public const int WordClassFieldNumber = 3;
    private string wordClass_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WordClass {
      get { return wordClass_; }
      set {
        wordClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "breaks" field.</summary>
    public const int BreaksFieldNumber = 4;
    private pb::ByteString breaks_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Breaks {
      get { return breaks_; }
      set {
        breaks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParsedSubFact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParsedSubFact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (BreakText != other.BreakText) return false;
      if (WordClass != other.WordClass) return false;
      if (Breaks != other.Breaks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (BreakText.Length != 0) hash ^= BreakText.GetHashCode();
      if (WordClass.Length != 0) hash ^= WordClass.GetHashCode();
      if (Breaks.Length != 0) hash ^= Breaks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (BreakText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BreakText);
      }
      if (WordClass.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WordClass);
      }
      if (Breaks.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Breaks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (BreakText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BreakText);
      }
      if (WordClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WordClass);
      }
      if (Breaks.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Breaks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParsedSubFact other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.BreakText.Length != 0) {
        BreakText = other.BreakText;
      }
      if (other.WordClass.Length != 0) {
        WordClass = other.WordClass;
      }
      if (other.Breaks.Length != 0) {
        Breaks = other.Breaks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 18: {
            BreakText = input.ReadString();
            break;
          }
          case 26: {
            WordClass = input.ReadString();
            break;
          }
          case 34: {
            Breaks = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BracketBooks : pb::IMessage<BracketBooks> {
    private static readonly pb::MessageParser<BracketBooks> _parser = new pb::MessageParser<BracketBooks>(() => new BracketBooks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BracketBooks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketBooks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketBooks(BracketBooks other) : this() {
      name_ = other.name_;
      books_ = other.books_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketBooks Clone() {
      return new BracketBooks(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "books" field.</summary>
    public const int BooksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rw.ToParsed.BracketBook> _repeated_books_codec
        = pb::FieldCodec.ForMessage(18, global::Rw.ToParsed.BracketBook.Parser);
    private readonly pbc::RepeatedField<global::Rw.ToParsed.BracketBook> books_ = new pbc::RepeatedField<global::Rw.ToParsed.BracketBook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rw.ToParsed.BracketBook> Books {
      get { return books_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BracketBooks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BracketBooks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!books_.Equals(other.books_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= books_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      books_.WriteTo(output, _repeated_books_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += books_.CalculateSize(_repeated_books_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BracketBooks other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      books_.Add(other.books_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            books_.AddEntriesFrom(input, _repeated_books_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BracketBook : pb::IMessage<BracketBook> {
    private static readonly pb::MessageParser<BracketBook> _parser = new pb::MessageParser<BracketBook>(() => new BracketBook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BracketBook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketBook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketBook(BracketBook other) : this() {
      lang_ = other.lang_;
      brackets_ = other.brackets_.Clone();
      alphabetAll_ = other.alphabetAll_;
      alphabetScripts_ = other.alphabetScripts_.Clone();
      okWords_ = other.okWords_.Clone();
      wrongUnicodeWords_ = other.wrongUnicodeWords_.Clone();
      wrongCldrWords_ = other.wrongCldrWords_.Clone();
      latinWords_ = other.latinWords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BracketBook Clone() {
      return new BracketBook(this);
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 1;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brackets" field.</summary>
    public const int BracketsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rw.ToParsed.Bracket> _repeated_brackets_codec
        = pb::FieldCodec.ForMessage(18, global::Rw.ToParsed.Bracket.Parser);
    private readonly pbc::RepeatedField<global::Rw.ToParsed.Bracket> brackets_ = new pbc::RepeatedField<global::Rw.ToParsed.Bracket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rw.ToParsed.Bracket> Brackets {
      get { return brackets_; }
    }

    /// <summary>Field number for the "alphabetAll" field.</summary>
    public const int AlphabetAllFieldNumber = 3;
    private string alphabetAll_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlphabetAll {
      get { return alphabetAll_; }
      set {
        alphabetAll_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alphabetScripts" field.</summary>
    public const int AlphabetScriptsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_alphabetScripts_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> alphabetScripts_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> AlphabetScripts {
      get { return alphabetScripts_; }
    }

    /// <summary>Field number for the "okWords" field.</summary>
    public const int OkWordsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_okWords_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> okWords_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OkWords {
      get { return okWords_; }
    }

    /// <summary>Field number for the "wrongUnicodeWords" field.</summary>
    public const int WrongUnicodeWordsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_wrongUnicodeWords_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> wrongUnicodeWords_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WrongUnicodeWords {
      get { return wrongUnicodeWords_; }
    }

    /// <summary>Field number for the "wrongCldrWords" field.</summary>
    public const int WrongCldrWordsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_wrongCldrWords_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> wrongCldrWords_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WrongCldrWords {
      get { return wrongCldrWords_; }
    }

    /// <summary>Field number for the "latinWords" field.</summary>
    public const int LatinWordsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_latinWords_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> latinWords_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LatinWords {
      get { return latinWords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BracketBook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BracketBook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lang != other.Lang) return false;
      if(!brackets_.Equals(other.brackets_)) return false;
      if (AlphabetAll != other.AlphabetAll) return false;
      if (!AlphabetScripts.Equals(other.AlphabetScripts)) return false;
      if(!okWords_.Equals(other.okWords_)) return false;
      if(!wrongUnicodeWords_.Equals(other.wrongUnicodeWords_)) return false;
      if(!wrongCldrWords_.Equals(other.wrongCldrWords_)) return false;
      if(!latinWords_.Equals(other.latinWords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      hash ^= brackets_.GetHashCode();
      if (AlphabetAll.Length != 0) hash ^= AlphabetAll.GetHashCode();
      hash ^= AlphabetScripts.GetHashCode();
      hash ^= okWords_.GetHashCode();
      hash ^= wrongUnicodeWords_.GetHashCode();
      hash ^= wrongCldrWords_.GetHashCode();
      hash ^= latinWords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lang.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Lang);
      }
      brackets_.WriteTo(output, _repeated_brackets_codec);
      if (AlphabetAll.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AlphabetAll);
      }
      alphabetScripts_.WriteTo(output, _map_alphabetScripts_codec);
      okWords_.WriteTo(output, _repeated_okWords_codec);
      wrongUnicodeWords_.WriteTo(output, _repeated_wrongUnicodeWords_codec);
      wrongCldrWords_.WriteTo(output, _repeated_wrongCldrWords_codec);
      latinWords_.WriteTo(output, _repeated_latinWords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      size += brackets_.CalculateSize(_repeated_brackets_codec);
      if (AlphabetAll.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlphabetAll);
      }
      size += alphabetScripts_.CalculateSize(_map_alphabetScripts_codec);
      size += okWords_.CalculateSize(_repeated_okWords_codec);
      size += wrongUnicodeWords_.CalculateSize(_repeated_wrongUnicodeWords_codec);
      size += wrongCldrWords_.CalculateSize(_repeated_wrongCldrWords_codec);
      size += latinWords_.CalculateSize(_repeated_latinWords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BracketBook other) {
      if (other == null) {
        return;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      brackets_.Add(other.brackets_);
      if (other.AlphabetAll.Length != 0) {
        AlphabetAll = other.AlphabetAll;
      }
      alphabetScripts_.Add(other.alphabetScripts_);
      okWords_.Add(other.okWords_);
      wrongUnicodeWords_.Add(other.wrongUnicodeWords_);
      wrongCldrWords_.Add(other.wrongCldrWords_);
      latinWords_.Add(other.latinWords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Lang = input.ReadString();
            break;
          }
          case 18: {
            brackets_.AddEntriesFrom(input, _repeated_brackets_codec);
            break;
          }
          case 26: {
            AlphabetAll = input.ReadString();
            break;
          }
          case 34: {
            alphabetScripts_.AddEntriesFrom(input, _map_alphabetScripts_codec);
            break;
          }
          case 42: {
            okWords_.AddEntriesFrom(input, _repeated_okWords_codec);
            break;
          }
          case 50: {
            wrongUnicodeWords_.AddEntriesFrom(input, _repeated_wrongUnicodeWords_codec);
            break;
          }
          case 58: {
            wrongCldrWords_.AddEntriesFrom(input, _repeated_wrongCldrWords_codec);
            break;
          }
          case 66: {
            latinWords_.AddEntriesFrom(input, _repeated_latinWords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bracket : pb::IMessage<Bracket> {
    private static readonly pb::MessageParser<Bracket> _parser = new pb::MessageParser<Bracket>(() => new Bracket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bracket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rw.ToParsed.ToParsedServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bracket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bracket(Bracket other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      factIdx_ = other.factIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bracket Clone() {
      return new Bracket(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "factIdx" field.</summary>
    public const int FactIdxFieldNumber = 3;
    private int factIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FactIdx {
      get { return factIdx_; }
      set {
        factIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bracket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bracket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (FactIdx != other.FactIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (FactIdx != 0) hash ^= FactIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (FactIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FactIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (FactIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FactIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bracket other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.FactIdx != 0) {
        FactIdx = other.FactIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            FactIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
